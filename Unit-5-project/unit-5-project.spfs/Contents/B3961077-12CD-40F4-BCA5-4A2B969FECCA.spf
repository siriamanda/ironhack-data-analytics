<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>house_price_regression</string>
			<key>host</key>
			<string>127.0.0.1</string>
			<key>kcid</key>
			<string>2396798489229429650</string>
			<key>name</key>
			<string>localhost</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8mb4</string>
			<key>contentFilterV2</key>
			<dict>
				<key>children</key>
				<array/>
				<key>filterClass</key>
				<string>groupNode</string>
				<key>isConjunction</key>
				<true/>
			</dict>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGBwpYJHZlcnNpb25ZJGFyY2hpdmVyVCR0
			b3BYJG9iamVjdHMSAAGGoF8QD05TS2V5ZWRBcmNoaXZlctEICVRk
			YXRhgAGoCwwXGBkaHiVVJG51bGzTDQ4PEBMWV05TLmtleXNaTlMu
			b2JqZWN0c1YkY2xhc3OiERKAAoADohQVgASABYAHVHR5cGVUcm93
			c18QHVNlbGVjdGlvbkRldGFpbFR5cGVOU0luZGV4U2V00hsPHB1c
			TlNSYW5nZUNvdW50EACABtIfICEiWiRjbGFzc25hbWVYJGNsYXNz
			ZXNaTlNJbmRleFNldKIjJFpOU0luZGV4U2V0WE5TT2JqZWN00h8g
			JidcTlNEaWN0aW9uYXJ5oiYkAAgAEQAaACQAKQAyADcASQBMAFEA
			UwBcAGIAaQBxAHwAgwCGAIgAigCNAI8AkQCTAJgAnQC9AMIAzwDR
			ANMA2ADjAOwA9wD6AQUBDgETASAAAAAAAAACAQAAAAAAAAAoAAAA
			AAAAAAAAAAAAAAABIw==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {853, 691}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string># 2. Create table

CREATE TABLE IF NOT EXISTS house_price_data (
	id int(11) UNIQUE NOT NULL,
	date char(20),
	bedrooms int(11),
	bathrooms float(11),
	sqft_living int(11),
	sqft_lot int(11),
	floors float(11),
	waterfront int(11),
	house_view int(11),
	house_condition int(11),
	grade int(11),
	sqft_above int(11),
	sqft_basement int(11),
	yr_built int(11),
	yr_renovated int(11),
	zipcode int(11),
	house_lat float(11),
	house_long float(11),
	sqft_living15 int(11),
	sqft_lot15 int(11),
	price int(11)
);

drop table if exists house_price_data;

# 3. Import dataset

SHOW VARIABLES LIKE 'local_infile';

SET GLOBAL local_infile = 1;

LOAD DATA LOCAL INFILE '/Users/siriamanda/Desktop/Ironhack/ironhack-data-analytics/Unit-5-project/regression_data_sql_copy.csv'
INTO TABLE house_price_data
FIELDS TERMINATED BY ','
IGNORE 1 ROWS;

# 4. Select all data

select * from house_price_data;

# 5. Drop column 'date'

alter table house_price_data
drop column date;

select * from house_price_data;

# 6. Count the number of rows

select count(id) from house_price_data;

# 7. Unique values

select distinct(bedrooms) 
from house_price_data;

select distinct(bathrooms) 
from house_price_data;

select distinct(floors) 
from house_price_data;

select distinct(house_condition) 
from house_price_data;

select distinct(grade) 
from house_price_data;

# 8. Arrange the data in a decreasing order by the price of the house

select id as ID
from house_price_data
order by price DESC
LIMIT 10;

# 9. Average selling price

select avg(price) as "average_price"
from house_price_data;

# 10. Group by clauses

# Average price grouped by bedroom

select bedrooms, avg(price) as "average_price"
from house_price_data
group by bedrooms;

# Average `sqft_living`grouped by bedroom

select bedrooms, avg(sqft_living) as "avg_living_room_space"
from house_price_data
group by bedrooms;

# Average price grouped by waterfront

select waterfront, avg(price) as "average_price"
from house_price_data
group by waterfront;

# Is there correlation between the columns `condition` and `grade`?

select house_condition, sum(grade)
from house_price_data
group by house_condition
order by house_condition DESC;

# 11. Simple query that matches customer request

select *
from house_price_data
where (bedrooms = 3 or bedrooms = 4)
and bathrooms &gt;= 3
and floors = 1
and waterfron = 0
and house_condition &gt;= 3
and grade &gt;= 5
having price &lt; 300000;

# 12. Properties whose price are twice more than the average price of all properties

select *
from house_price_data
where price &gt; (select avg(price) * 2 from house_price_data);

# 13. Create a view

create or replace view high_price_properties as
select *
from house_price_data
where price &gt; (select avg(price) * 2 from house_price_data);

# 14. Difference in avg price 3 or 4 bedrooms

select bedrooms, avg(price) as avg_price
from house_price_data
where (bedrooms = 3 or bedrooms = 4)
group by bedrooms;

# 15. Locations

select distinct(zipcode)
from house_price_data;

# 16. Properties that have been renovated

select *
from house_price_data
where yr_renovated &lt;&gt; 0;

# 17. The 11th most expensive property

with cte_expensive_properties as (
select *
from house_price_data
order by price DESC
LIMIT 11
)
select * 
from cte_expensive_properties
order by price ASC
LIMIT 1;</string>
			<key>table</key>
			<string>house_price_data</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>214</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>LOAD DATA LOCAL INFILE '/Users/siriamanda/Desktop/Ironhack/ironhack-data-analytics/Unit-5-project/regression_data_clean.csv'
INTO TABLE house_price_data
FIELDS TERMINATED BY ','
IGNORE 1 ROWS</string>
		<string># 2. Create table

CREATE TABLE IF NOT EXISTS house_price_data (
	id int(11) UNIQUE NOT NULL,
	date char(20),
	bedrooms int(11),
	bathrooms float(11),
	sqft_living int(11),
	sqft_lot int(11),
	floors float(11),
	waterfront int(11),
	house_view int(11),
	house_condition int(11),
	grade int(11),
	sqft_above int(11),
	sqft_basement int(11),
	yr_built int(11),
	yr_renovated int(11),
	zipcode int(11),
	house_lat float(11),
	house_long float(11),
	sqft_living15 int(11),
	sqft_lot15 int(11),
	price int(11)
)</string>
		<string>drop table if exists house_price_data</string>
		<string># 2. Create table

CREATE TABLE IF NOT EXISTS house_price_data (
	id int(11) NOT NULL,
	date char(20),
	bedrooms int(11),
	bathrooms float(11),
	sqft_living int(11),
	sqft_lot int(11),
	floors float(11),
	waterfront int(11),
	house_view int(11),
	house_condition int(11),
	grade int(11),
	sqft_above int(11),
	sqft_basement int(11),
	yr_built int(11),
	yr_renovated int(11),
	zipcode int(11),
	house_lat float(11),
	house_long float(11),
	sqft_living15 int(11),
	sqft_lot15 int(11),
	price int(11)
)</string>
		<string>LOAD DATA LOCAL INFILE '/Users/siriamanda/Desktop/Ironhack/ironhack-data-analytics/Unit-5-project/regression_data_sql_copy.csv'
INTO TABLE house_price_data
FIELDS TERMINATED BY ','
IGNORE 1 ROWS</string>
		<string># 3. Import dataset

SHOW VARIABLES LIKE 'local_infile'</string>
		<string># 4. Select all data

select * from house_price_data</string>
		<string>select count(distinct(id)) from house_price_data</string>
		<string># 17. The 11th most expensive property

with cte_expensive_properties as (
select *
from house_price_data
order by price DESC
LIMIT 11
)
select * 
from cte_expensive_properties
order by price ASC
LIMIT 1</string>
		<string># 17. The 11th most expensive property

with cte_expensive_properties as (
select *
from house_price_data
order by price DESC
LIMIT 11
)
select * 
from cte_expensive_properties
prder by price ASC
LIMIT 1</string>
		<string># 17. The 11th most expensive property

select *
from house_price_data
order by price DESC
LIMIT 11</string>
		<string># 17. The 11th most expensive property

select *
from house_price_data
order by price DESC</string>
		<string># 17. The 11th most expensive property

select *
from house_price_data
order by price</string>
		<string># 16. Properties that have been renovated

select *
from house_price_data
where yr_renovated &lt;&gt; 0</string>
		<string># 16. Properties that have been renovated

select *
from house_price_data
where &lt;&gt; 0</string>
		<string># 16. Properties that have been renovated

select *
from house_price_data
where &lt;&gt; '0'</string>
		<string># 13. Locations

select distinct(zipcode)
from house_price_data</string>
		<string># Differnce in avg price 3 or 4 bedrooms

select bedrooms, avg(price) as avg_price
from house_price_data
where (bedrooms = 3 or bedrooms = 4)
group by bedrooms</string>
		<string># Differnce in avg price 3 or 4 bedrooms

select bedrooms, avg(price)
from house_price_data
where (bedrooms = 3 or bedrooms = 4)</string>
		<string># Create a view

create or replace view high_price_properties as
select *
from house_price_data
where price &gt; (select avg(price) * 2 from house_price_data)</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>8.0.21</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
